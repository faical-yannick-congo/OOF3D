# OOF version (unreleased)
phi0 = pi/4.
omega = pi/4.
OOF.LoadData.FileVersion(number=1.0, format='script')
OOF.LoadData.Microstructure.New(name='microstructure', size=Point(1,1,1), isize=iPoint(1,1,1))
OOF.LoadData.Microstructure.Categories(microstructure='microstructure', categories=[[[0]]])
OOF.LoadData.Property.Mechanical.Elasticity.LargeStrain.Isotropic(name='instance', cijkl=IsotropicRank4TensorEnu(young=1.0,poisson=0.2))
OOF.LoadData.MaterialandType(name='material', properties=['Mechanical:Elasticity:LargeStrain:Isotropic:instance'], materialtype='bulk')
OOF.LoadData.Microstructure.DefineCategory.Material(microstructure='microstructure', category=0, material='material')
OOF.LoadData.Microstructure.EndCategories(microstructure='microstructure')
OOF.LoadData.Skeleton.NewPeriodic(name='skeleton', microstructure='microstructure', x_periodicity=0, y_periodicity=0, z_periodicity=0)
OOF.LoadData.Skeleton.Nodes(skeleton='microstructure:skeleton', points=[(0.0, 0.0, 0.0), (0.0, 0.0, 1.0), (1.0, 0.0, 0.0), (1.0, 0.0, 1.0), (0.0, 1.0, 0.0), (0.0, 1.0, 1.0), (1.0, 1.0, 0.0), (1.0, 1.0, 1.0)])
OOF.LoadData.Skeleton.Elements(skeleton='microstructure:skeleton', nodes=[(1, 7, 3, 2), (1, 5, 7, 4), (2, 7, 6, 4), (1, 2, 0, 4), (1, 4, 7, 2)])
OOF.LoadData.Skeleton.PinnedNodes(skeleton='microstructure:skeleton', nodes=[])
OOF.LoadData.Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XmaxYmaxZmax', nodes=[7], exterior=1)
OOF.LoadData.Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XmaxYmaxZmin', nodes=[6], exterior=1)
OOF.LoadData.Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XmaxYminZmax', nodes=[3], exterior=1)
OOF.LoadData.Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XmaxYminZmin', nodes=[2], exterior=1)
OOF.LoadData.Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XminYmaxZmax', nodes=[5], exterior=1)
OOF.LoadData.Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XminYmaxZmin', nodes=[4], exterior=1)
OOF.LoadData.Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XminYminZmax', nodes=[1], exterior=1)
OOF.LoadData.Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='XminYminZmin', nodes=[0], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XmaxYmax', edges=[(6, 7)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XmaxYmin', edges=[(2, 3)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XmaxZmax', edges=[(3, 7)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XmaxZmin', edges=[(2, 6)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XminYmax', edges=[(4, 5)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XminYmin', edges=[(0, 1)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XminZmax', edges=[(1, 5)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='XminZmin', edges=[(0, 4)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='YmaxZmax', edges=[(5, 7)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='YmaxZmin', edges=[(4, 6)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='YminZmax', edges=[(1, 3)], exterior=1)
OOF.LoadData.Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='YminZmin', edges=[(0, 2)], exterior=1)
OOF.LoadData.Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Xmax', faces=[(2, 6, 7), (7, 3, 2)], exterior=1)
OOF.LoadData.Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Xmin', faces=[(0, 1, 4), (5, 4, 1)], exterior=1)
OOF.LoadData.Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Ymax', faces=[(4, 5, 7), (7, 6, 4)], exterior=1)
OOF.LoadData.Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Ymin', faces=[(1, 2, 3), (2, 1, 0)], exterior=1)
OOF.LoadData.Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Zmax', faces=[(1, 3, 7), (7, 5, 1)], exterior=1)
OOF.LoadData.Skeleton.FaceBoundary(skeleton='microstructure:skeleton', name='Zmin', faces=[(2, 4, 6), (4, 2, 0)], exterior=1)
OOF.LoadData.Skeleton.ElementSelection(skeleton='microstructure:skeleton', elements=[])
OOF.LoadData.Skeleton.FaceSelection(skeleton='microstructure:skeleton', faces=[])
OOF.LoadData.Skeleton.SegmentSelection(skeleton='microstructure:skeleton', segments=[])
OOF.LoadData.Skeleton.NodeSelection(skeleton='microstructure:skeleton', nodes=[])
OOF.LoadData.Mesh.New(name='mesh', masterelems=['D2_2', 'TET4_4', 'T3_3', 'Q4_4'], skeleton='microstructure:skeleton')
OOF.LoadData.Subproblem.Fields(subproblem='microstructure:skeleton:mesh:default', defined=['Displacement'], active=['Displacement'])
OOF.LoadData.Subproblem.Equations(subproblem='microstructure:skeleton:mesh:default', equations=['Force_Balance'])
OOF.LoadData.Subproblem.Solver(subproblem='microstructure:skeleton:mesh:default', solver_mode=AdvancedSolverMode(time_stepper=StaticDriver(),nonlinear_solver=Newton(relative_tolerance=1e-08,absolute_tolerance=1e-13,maximum_iterations=200),symmetric_solver=ConjugateGradient(preconditioner=ILUPreconditioner(),tolerance=1e-13,max_iterations=1000),asymmetric_solver=BiConjugateGradient(preconditioner=ILUPreconditioner(),tolerance=1e-13,max_iterations=1000)))
OOF.LoadData.Mesh.Initialize_Field(mesh='microstructure:skeleton:mesh', field=Displacement, initializer=ConstThreeVectorFieldInit(cx=0.0,cy=0.0,cz=0.0))
OOF.LoadData.Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc', bc=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='XminYminZmin'))
OOF.LoadData.Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<2>', bc=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='XminYminZmin'))
OOF.LoadData.Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<3>', bc=DirichletBC(field=Displacement,field_component='z',equation=Force_Balance,eqn_component='z',profile=ConstantProfile(value=0.0),boundary='XminYminZmin'))
OOF.LoadData.Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<4>', bc=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ContinuumProfileXTd(function='sqrt(2)*cos(omega*t + phi0) - sqrt(2)*cos(phi0)',timeDerivative='0.0',timeDerivative2='0.0'),boundary='XmaxYmaxZmin'))
OOF.LoadData.Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<5>', bc=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ContinuumProfileXTd(function='sqrt(2)*sin(omega*t + phi0) - sqrt(2)*sin(phi0)',timeDerivative='0.0',timeDerivative2='0.0'),boundary='XmaxYmaxZmin'))
OOF.LoadData.Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<6>', bc=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='XminYminZmax'))
OOF.LoadData.Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<7>', bc=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='XminYminZmax'))
OOF.LoadData.Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<8>', bc=DirichletBC(field=Displacement,field_component='z',equation=Force_Balance,eqn_component='z',profile=ConstantProfile(value=0.0),boundary='XminYminZmax'))
OOF.LoadData.Mesh.Load_Field(mesh='microstructure:skeleton:mesh', fields=['Displacement'], field_values=[(0, 0.0, 0.0, 0.0), (1, 0.0, 0.0, 0.0), (2, 0.0, 0.0, 0.0), (3, 0.0, 0.0, 0.0), (4, 0.0, 0.0, 0.0), (5, 0.0, 0.0, 0.0), (6, 0.0, 0.0, 0.0), (7, 0.0, 0.0, 0.0)])
OOF.LoadData.Mesh.Time(mesh='microstructure:skeleton:mesh', time=0.0)
OOF.LoadData.Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name=AutomaticName('GraphicsUpdate'), output=GraphicsUpdate(), scheduletype=AbsoluteOutputSchedule(), schedule=Periodic(delay=0.0,interval=0.1), destination=GfxWindowDestination())
OOF.LoadData.Mesh.Status(mesh='microstructure:skeleton:mesh', status=Unsolved(details='Newly loaded.'))
