# OOF version 2.0
FileVersion(number=1.0, format='ascii')
Microstructure.New(name='reference', size=Point(1,1), isize=iPoint(10,10))
Microstructure.PixelGroup(microstructure='reference', group='stripe', meshable=1)
Microstructure.PixelGroup(microstructure='reference', group='edges', meshable=1)
Microstructure.Categories(microstructure='reference', categories=[[0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]])
Microstructure.DefineCategory.PixelGroups(microstructure='reference', category=0, groups=['edges'])
Microstructure.DefineCategory.PixelGroups(microstructure='reference', category=1, groups=['stripe'])
Property.Thermal.Conductivity.Isotropic(name='', kappa=1.0)
Material(name='material', properties=['Thermal:Conductivity:Isotropic'])
Microstructure.DefineCategory.Material(microstructure='reference', category=0, material='material')
Microstructure.DefineCategory.Material(microstructure='reference', category=1, material='material')
Microstructure.EndCategories(microstructure='reference')
Skeleton.New(name='skeleton', microstructure='reference')
Skeleton.Nodes(skeleton='reference:skeleton', points=[(0.0, 0.0), (0.10000000000000001, 0.0), (0.20000000000000001, 0.0), (0.30000000000000004, 0.0), (0.40000000000000002, 0.0), (0.5, 0.0), (0.60000000000000009, 0.0), (0.70000000000000007, 0.0), (0.80000000000000004, 0.0), (0.90000000000000002, 0.0), (1.0, 0.0), (0.0, 0.10000000000000001), (0.10000000000000001, 0.10000000000000001), (0.20000000000000001, 0.10000000000000001), (0.30000000000000004, 0.10000000000000001), (0.40000000000000002, 0.10000000000000001), (0.5, 0.10000000000000001), (0.60000000000000009, 0.10000000000000001), (0.70000000000000007, 0.10000000000000001), (0.80000000000000004, 0.10000000000000001), (0.90000000000000002, 0.10000000000000001), (1.0, 0.10000000000000001), (0.0, 0.20000000000000001), (0.10000000000000001, 0.20000000000000001), (0.20000000000000001, 0.20000000000000001), (0.30000000000000004, 0.20000000000000001), (0.40000000000000002, 0.20000000000000001), (0.5, 0.20000000000000001), (0.60000000000000009, 0.20000000000000001), (0.70000000000000007, 0.20000000000000001), (0.80000000000000004, 0.20000000000000001), (0.90000000000000002, 0.20000000000000001), (1.0, 0.20000000000000001), (0.0, 0.30000000000000004), (0.10000000000000001, 0.30000000000000004), (0.20000000000000001, 0.30000000000000004), (0.30000000000000004, 0.30000000000000004), (0.40000000000000002, 0.30000000000000004), (0.5, 0.30000000000000004), (0.60000000000000009, 0.30000000000000004), (0.70000000000000007, 0.30000000000000004), (0.80000000000000004, 0.30000000000000004), (0.90000000000000002, 0.30000000000000004), (1.0, 0.30000000000000004), (0.0, 0.40000000000000002), (0.10000000000000001, 0.40000000000000002), (0.20000000000000001, 0.40000000000000002), (0.30000000000000004, 0.40000000000000002), (0.40000000000000002, 0.40000000000000002), (0.5, 0.40000000000000002), (0.60000000000000009, 0.40000000000000002), (0.70000000000000007, 0.40000000000000002), (0.80000000000000004, 0.40000000000000002), (0.90000000000000002, 0.40000000000000002), (1.0, 0.40000000000000002), (0.0, 0.5), (0.10000000000000001, 0.5), (0.20000000000000001, 0.5), (0.30000000000000004, 0.5), (0.40000000000000002, 0.5), (0.5, 0.5), (0.60000000000000009, 0.5), (0.70000000000000007, 0.5), (0.80000000000000004, 0.5), (0.90000000000000002, 0.5), (1.0, 0.5), (0.0, 0.60000000000000009), (0.10000000000000001, 0.60000000000000009), (0.20000000000000001, 0.60000000000000009), (0.30000000000000004, 0.60000000000000009), (0.40000000000000002, 0.60000000000000009), (0.5, 0.60000000000000009), (0.60000000000000009, 0.60000000000000009), (0.70000000000000007, 0.60000000000000009), (0.80000000000000004, 0.60000000000000009), (0.90000000000000002, 0.60000000000000009), (1.0, 0.60000000000000009), (0.0, 0.70000000000000007), (0.10000000000000001, 0.70000000000000007), (0.20000000000000001, 0.70000000000000007), (0.30000000000000004, 0.70000000000000007), (0.40000000000000002, 0.70000000000000007), (0.5, 0.70000000000000007), (0.60000000000000009, 0.70000000000000007), (0.70000000000000007, 0.70000000000000007), (0.80000000000000004, 0.70000000000000007), (0.90000000000000002, 0.70000000000000007), (1.0, 0.70000000000000007), (0.0, 0.80000000000000004), (0.10000000000000001, 0.80000000000000004), (0.20000000000000001, 0.80000000000000004), (0.30000000000000004, 0.80000000000000004), (0.40000000000000002, 0.80000000000000004), (0.5, 0.80000000000000004), (0.60000000000000009, 0.80000000000000004), (0.70000000000000007, 0.80000000000000004), (0.80000000000000004, 0.80000000000000004), (0.90000000000000002, 0.80000000000000004), (1.0, 0.80000000000000004), (0.0, 0.90000000000000002), (0.10000000000000001, 0.90000000000000002), (0.20000000000000001, 0.90000000000000002), (0.30000000000000004, 0.90000000000000002), (0.40000000000000002, 0.90000000000000002), (0.5, 0.90000000000000002), (0.60000000000000009, 0.90000000000000002), (0.70000000000000007, 0.90000000000000002), (0.80000000000000004, 0.90000000000000002), (0.90000000000000002, 0.90000000000000002), (1.0, 0.90000000000000002), (0.0, 1.0), (0.10000000000000001, 1.0), (0.20000000000000001, 1.0), (0.30000000000000004, 1.0), (0.40000000000000002, 1.0), (0.5, 1.0), (0.60000000000000009, 1.0), (0.70000000000000007, 1.0), (0.80000000000000004, 1.0), (0.90000000000000002, 1.0), (1.0, 1.0)])
Skeleton.Elements(skeleton='reference:skeleton', nodes=[(0, 1, 12, 11), (1, 2, 13, 12), (2, 3, 14, 13), (3, 4, 15, 14), (4, 5, 16, 15), (5, 6, 17, 16), (6, 7, 18, 17), (7, 8, 19, 18), (8, 9, 20, 19), (9, 10, 21, 20), (11, 12, 23, 22), (12, 13, 24, 23), (13, 14, 25, 24), (14, 15, 26, 25), (15, 16, 27, 26), (16, 17, 28, 27), (17, 18, 29, 28), (18, 19, 30, 29), (19, 20, 31, 30), (20, 21, 32, 31), (22, 23, 34, 33), (23, 24, 35, 34), (24, 25, 36, 35), (25, 26, 37, 36), (26, 27, 38, 37), (27, 28, 39, 38), (28, 29, 40, 39), (29, 30, 41, 40), (30, 31, 42, 41), (31, 32, 43, 42), (33, 34, 45, 44), (34, 35, 46, 45), (35, 36, 47, 46), (36, 37, 48, 47), (37, 38, 49, 48), (38, 39, 50, 49), (39, 40, 51, 50), (40, 41, 52, 51), (41, 42, 53, 52), (42, 43, 54, 53), (44, 45, 56, 55), (45, 46, 57, 56), (46, 47, 58, 57), (47, 48, 59, 58), (48, 49, 60, 59), (49, 50, 61, 60), (50, 51, 62, 61), (51, 52, 63, 62), (52, 53, 64, 63), (53, 54, 65, 64), (55, 56, 67, 66), (56, 57, 68, 67), (57, 58, 69, 68), (58, 59, 70, 69), (59, 60, 71, 70), (60, 61, 72, 71), (61, 62, 73, 72), (62, 63, 74, 73), (63, 64, 75, 74), (64, 65, 76, 75), (66, 67, 78, 77), (67, 68, 79, 78), (68, 69, 80, 79), (69, 70, 81, 80), (70, 71, 82, 81), (71, 72, 83, 82), (72, 73, 84, 83), (73, 74, 85, 84), (74, 75, 86, 85), (75, 76, 87, 86), (77, 78, 89, 88), (78, 79, 90, 89), (79, 80, 91, 90), (80, 81, 92, 91), (81, 82, 93, 92), (82, 83, 94, 93), (83, 84, 95, 94), (84, 85, 96, 95), (85, 86, 97, 96), (86, 87, 98, 97), (88, 89, 100, 99), (89, 90, 101, 100), (90, 91, 102, 101), (91, 92, 103, 102), (92, 93, 104, 103), (93, 94, 105, 104), (94, 95, 106, 105), (95, 96, 107, 106), (96, 97, 108, 107), (97, 98, 109, 108), (99, 100, 111, 110), (100, 101, 112, 111), (101, 102, 113, 112), (102, 103, 114, 113), (103, 104, 115, 114), (104, 105, 116, 115), (105, 106, 117, 116), (106, 107, 118, 117), (107, 108, 119, 118), (108, 109, 120, 119)])
Skeleton.PinnedNodes(skeleton='reference:skeleton', nodes=[])
Skeleton.PointBoundary(skeleton='reference:skeleton', name='topleft', nodes=[110], exterior=1)
Skeleton.PointBoundary(skeleton='reference:skeleton', name='bottomleft', nodes=[0], exterior=1)
Skeleton.PointBoundary(skeleton='reference:skeleton', name='topright', nodes=[120], exterior=1)
Skeleton.PointBoundary(skeleton='reference:skeleton', name='bottomright', nodes=[10], exterior=1)
Skeleton.PointBoundary(skeleton='reference:skeleton', name='midtop', nodes=[114], exterior=0)
Skeleton.EdgeBoundary(skeleton='reference:skeleton', name='top', edges=[(120, 119), (119, 118), (118, 117), (117, 116), (116, 115), (115, 114), (114, 113), (113, 112), (112, 111), (111, 110)], exterior=1)
Skeleton.EdgeBoundary(skeleton='reference:skeleton', name='right', edges=[(10, 21), (21, 32), (32, 43), (43, 54), (54, 65), (65, 76), (76, 87), (87, 98), (98, 109), (109, 120)], exterior=1)
Skeleton.EdgeBoundary(skeleton='reference:skeleton', name='left', edges=[(110, 99), (99, 88), (88, 77), (77, 66), (66, 55), (55, 44), (44, 33), (33, 22), (22, 11), (11, 0)], exterior=1)
Skeleton.EdgeBoundary(skeleton='reference:skeleton', name='bottom', edges=[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)], exterior=1)
Mesh.New(name='mesh', masterelems=['T6_6', 'Q8_8'], skeleton='reference:skeleton')
Subproblem.New(name='stripe', subproblem=PixelGroupSubProblem(group='stripe'), mesh='reference:skeleton:mesh')
Subproblem.New(name='edges', subproblem=PixelGroupSubProblem(group='edges'), mesh='reference:skeleton:mesh')
Subproblem.Fields(subproblem='reference:skeleton:mesh:edges', defined=['Temperature'], active=['Temperature'], inplane=['Temperature'])
Subproblem.Equations(subproblem='reference:skeleton:mesh:edges', equations=['Heat_Eqn'])
Mesh.Boundary_Condition(mesh='reference:skeleton:mesh', bcname='bc', bc=DirichletBC(field=Temperature,field_component='',equation=Heat_Eqn,eqn_component='',profile=ConstantProfile(value=0.0),boundary='bottom'))
Mesh.Boundary_Condition(mesh='reference:skeleton:mesh', bcname='bc<2>', bc=ForceBC(equation=Heat_Eqn,eqn_component='',profile=ContinuumProfile(function='1'),boundary='midtop'))
Mesh.Load_Field(mesh='reference:skeleton:mesh', fields=[], field_values=[(3,), (4,), (5,), (6,), (7,), (14,), (15,), (16,), (17,), (18,), (25,), (26,), (27,), (28,), (29,), (36,), (37,), (38,), (39,), (40,), (47,), (48,), (49,), (50,), (51,), (58,), (59,), (60,), (61,), (62,), (69,), (70,), (71,), (72,), (73,), (80,), (81,), (82,), (83,), (84,), (91,), (92,), (93,), (94,), (95,), (102,), (103,), (104,), (105,), (106,), (113,), (114,), (115,), (116,), (117,), (128,), (129,), (130,), (131,), (132,), (133,), (134,), (135,), (136,), (137,), (138,), (139,), (140,), (141,), (142,), (143,), (145,), (157,), (158,), (159,), (160,), (161,), (162,), (163,), (164,), (165,), (166,), (168,), (178,), (179,), (180,), (181,), (182,), (183,), (184,), (185,), (186,), (187,), (189,), (199,), (200,), (201,), (202,), (203,), (204,), (205,), (206,), (207,), (208,), (210,), (220,), (221,), (222,), (223,), (224,), (225,), (226,), (227,), (228,), (229,), (231,), (241,), (242,), (243,), (244,), (245,), (246,), (247,), (248,), (249,), (250,), (252,), (262,), (263,), (264,), (265,), (266,), (267,), (268,), (269,), (270,), (271,), (273,), (283,), (284,), (285,), (286,), (287,), (288,), (289,), (290,), (291,), (292,), (294,), (304,), (305,), (306,), (307,), (308,), (309,), (310,), (311,), (312,), (313,), (315,), (325,), (326,), (327,), (328,), (329,), (330,), (331,), (332,), (333,), (334,), (336,)])
Mesh.Load_Field(mesh='reference:skeleton:mesh', fields=['Temperature', 'Temperature_z'], field_values=[(0, 0.0, 0.0), (1, 0.0, 0.0), (2, 0.0, 0.0), (8, 0.0, 0.0), (9, 0.0, 0.0), (10, 0.0, 0.0), (11, -8.9654973928778055e-15, 0.0), (12, -8.8037243479662229e-15, 0.0), (13, -2.5425021111643841e-15, 0.0), (19, 4.0829709426960915e-16, 0.0), (20, 3.7772929107791451e-15, 0.0), (21, 5.486377179320175e-16, 0.0), (22, -1.7183447048984021e-14, 0.0), (23, -2.2037051873013514e-14, 0.0), (24, -7.7489766601677779e-15, 0.0), (30, -2.2404749495133868e-14, 0.0), (31, -1.4434950352305738e-14, 0.0), (32, 3.2443602087125314e-15, 0.0), (33, -1.3901298498846623e-14, 0.0), (34, -1.4379775056545982e-14, 0.0), (35, -1.3421566272069682e-14, 0.0), (41, -3.7678059837399358e-15, 0.0), (42, -6.3787583936479025e-15, 0.0), (43, 2.8106910399203043e-15, 0.0), (44, -2.3283780646981142e-14, 0.0), (45, -1.510783275450743e-14, 0.0), (46, -2.0797626121069811e-14, 0.0), (52, -1.1383561491507159e-14, 0.0), (53, -8.056837250295885e-15, 0.0), (54, -1.3490522335877979e-14, 0.0), (55, -1.540741069812774e-14, 0.0), (56, -1.4200174782525048e-14, 0.0), (57, -1.6230449749784291e-14, 0.0), (63, -1.8088579485910722e-14, 0.0), (64, -1.5137320051065922e-14, 0.0), (65, -1.5067927495355496e-14, 0.0), (66, -2.2709135851714587e-14, 0.0), (67, -2.0988995288459285e-14, 0.0), (68, -2.5493473892746503e-14, 0.0), (74, -1.3325273389755692e-14, 0.0), (75, -1.448893794608648e-14, 0.0), (76, -1.923731692495941e-14, 0.0), (77, -2.2741850291761545e-14, 0.0), (78, -2.0114288948154872e-14, 0.0), (79, -2.1226355791123151e-14, 0.0), (85, -2.1641320702950846e-14, 0.0), (86, -2.1089152901192934e-14, 0.0), (87, -2.79957580376111e-14, 0.0), (88, -3.1037014957718135e-14, 0.0), (89, -3.7367219214954485e-14, 0.0), (90, -2.9149665254706006e-14, 0.0), (96, -2.2343973891348288e-14, 0.0), (97, -3.3783259491368302e-14, 0.0), (98, -3.5058741610446516e-14, 0.0), (99, -4.3999512063337328e-14, 0.0), (100, -4.5681720046320303e-14, 0.0), (101, -3.2338304777399861e-14, 0.0), (107, -1.6909436936511106e-14, 0.0), (108, -3.1813610607857741e-14, 0.0), (109, -1.9972833902028237e-14, 0.0), (110, -2.0328388341638871e-14, 0.0), (111, -3.987107208306446e-14, 0.0), (112, -3.1376230388935492e-14, 0.0), (118, -3.1813900704463943e-14, 0.0), (119, -3.7440784816764992e-14, 0.0), (120, -2.8916629620205182e-14, 0.0), (121, 0.0, 0.0), (122, -3.3398277109041274e-15, 0.0), (123, -9.8629529877767929e-15, 0.0), (124, -1.1114045558044597e-14, 0.0), (125, 0.0, 0.0), (126, -2.6676131855507348e-15, 0.0), (127, -6.410035072699383e-15, 0.0), (144, 3.197642209959907e-15, 0.0), (146, 0.0, 0.0), (147, 1.1990117576214252e-15, 0.0), (148, -3.3147178288790412e-16, 0.0), (149, 0.0, 0.0), (150, 4.7111656248402308e-16, 0.0), (151, 4.3381758304716826e-15, 0.0), (152, -1.35129101399481e-14, 0.0), (153, -1.0525064397832796e-14, 0.0), (154, -2.2499942106143611e-14, 0.0), (155, -4.282435012000479e-15, 0.0), (156, -2.294534165903212e-14, 0.0), (167, -1.1806163498691911e-14, 0.0), (169, -1.803503797595533e-15, 0.0), (170, -1.157190383210388e-14, 0.0), (171, 5.5845569547888416e-15, 0.0), (172, -8.4215297638100761e-15, 0.0), (173, -2.1659679604293161e-14, 0.0), (174, -1.0817365643954994e-14, 0.0), (175, -2.4901716395697256e-14, 0.0), (176, -1.5096657368228023e-14, 0.0), (177, -1.7233468984395214e-14, 0.0), (188, -1.1165143352913828e-14, 0.0), (190, -2.4619067691184247e-15, 0.0), (191, -4.5878886399797325e-15, 0.0), (192, 6.1815291618788531e-15, 0.0), (193, -4.7918990478181446e-15, 0.0), (194, -1.5252128951695778e-14, 0.0), (195, -2.0466562797065779e-14, 0.0), (196, -2.5840031044789049e-14, 0.0), (197, -9.7196644147501581e-15, 0.0), (198, -9.0192910594671281e-15, 0.0), (209, -1.8855866864991922e-14, 0.0), (211, -1.436992903292323e-14, 0.0), (212, -1.2958118176341358e-14, 0.0), (213, -4.00285056816767e-15, 0.0), (214, -7.3511697752202183e-15, 0.0), (215, -1.5163774688578557e-14, 0.0), (216, -2.0323272385829694e-14, 0.0), (217, -1.4295486909738502e-14, 0.0), (218, -1.7409719331995159e-14, 0.0), (219, -1.7305054758145594e-14, 0.0), (230, -1.5522633247403067e-14, 0.0), (232, -1.0118471915323338e-14, 0.0), (233, -1.7962458452752119e-14, 0.0), (234, -1.4071699537060531e-14, 0.0), (235, -1.6902687810611102e-14, 0.0), (236, -2.0497572915844763e-14, 0.0), (237, -2.2989235269571433e-14, 0.0), (238, -1.5504424620551577e-14, 0.0), (239, -2.0638310617886205e-14, 0.0), (240, -1.1861537737475579e-14, 0.0), (251, -1.2940223075799433e-14, 0.0), (253, -1.0135512853176826e-14, 0.0), (254, -8.8133687979991854e-15, 0.0), (255, -1.4698594403580807e-14, 0.0), (256, -1.1087431503949011e-14, 0.0), (257, -2.0598304753763879e-14, 0.0), (258, -3.0910700785238233e-14, 0.0), (259, -1.4910555128937776e-14, 0.0), (260, -2.2835018556470729e-14, 0.0), (261, -2.2056247819242908e-14, 0.0), (272, -1.960885052260662e-14, 0.0), (274, -2.5006367993273948e-14, 0.0), (275, -2.4544418010530724e-14, 0.0), (276, -2.7286040358992056e-14, 0.0), (277, -2.737049457884029e-14, 0.0), (278, -2.8884895155061675e-14, 0.0), (279, -2.7651436972538115e-14, 0.0), (280, -2.3046283177554295e-14, 0.0), (281, -2.8362581850901424e-14, 0.0), (282, -3.6859512097689606e-14, 0.0), (293, -1.9071881065650645e-14, 0.0), (295, -2.6435325371288714e-14, 0.0), (296, -2.9232700718604781e-14, 0.0), (297, -3.3678062681797546e-14, 0.0), (298, -3.3907654595890354e-14, 0.0), (299, -3.754224879076198e-14, 0.0), (300, -4.4073629219638091e-14, 0.0), (301, -3.6785724814995949e-14, 0.0), (302, -2.8551154997459548e-14, 0.0), (303, -3.6507275204792701e-14, 0.0), (314, -9.8174713363267673e-15, 0.0), (316, -2.517073146321219e-14, 0.0), (317, -2.7104591147360984e-14, 0.0), (318, -2.5724938053760666e-14, 0.0), (319, -2.9867545784646018e-14, 0.0), (320, -4.5961685039059615e-14, 0.0), (321, -3.9182367343684059e-14, 0.0), (322, -4.2591307661840898e-14, 0.0), (323, -3.1133488645645668e-14, 0.0), (324, -3.6734849757275056e-14, 0.0), (335, -2.7049232761074127e-14, 0.0), (337, -3.6390460746953511e-14, 0.0), (338, -3.4346800208140213e-14, 0.0), (339, -2.9866928578322021e-14, 0.0), (340, -3.4640263602784661e-14, 0.0)])
